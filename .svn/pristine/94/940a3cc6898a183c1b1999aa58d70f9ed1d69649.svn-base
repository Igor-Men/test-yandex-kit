<?php
class products_supplier extends Engine_Class {

    public function process() {
        try {
            $product = Shop::Get()->getShopService()->getProductByID(
                $this->getArgument('id')
            );

            $this->setValue('productid', $product->getId());
            Engine::GetHTMLHead()->setTitle('Товар #'.$product->getId());

            // сохраняем поставщиков
            if ($this->getControlValue('ok')) {
                try {
                    SQLObject::TransactionStart();

                    for ($j = 1; $j <= 10; $j++) {
                        $supplierDiscount = 0;
                        try {
                            $supplierID = $this->getControlValue('supplier'.$j.'id');
                            $supplier = Shop::Get()->getShopService()->getSupplierByID($supplierID);
                            $supplierDiscount = $this->getControlValue('supplier'.$j.'discount');
                            $supplierCode = $this->getControlValue('supplier'.$j.'code');
                            $supplierPrice = $this->getControlValue('supplier'.$j.'price');
                            $supplierCurrencyID = $this->getControlValue('supplier'.$j.'currencyid');
                            $supplierAvailText = $this->getControlValue('supplier'.$j.'availtext');
                            $supplierComment = $this->getControlValue('supplier'.$j.'comment');
                            $supplierAvail = $this->getControlValue('supplier'.$j.'avail');
                            $supplierMinretail = $this->getControlValue('supplier'.$j.'minretail');
                            $supplierMinretail_cur_id = $this->getControlValue('supplier'.$j.'minretail_cur_id');
                            $supplierRecommretail = $this->getControlValue('supplier'.$j.'recommretail');
                            $supplierRecommretail_cur_id = $this->getControlValue('supplier'.$j.'recommretail_cur_id');

                        } catch (Exception $e) {
                            $supplierID = 0;
                            $supplierCode = '';
                            $supplierPrice = 0;
                            $supplierCurrencyID = 0;
                            $supplierAvailText = '';
                            $supplierComment = '';
                            $supplierAvail = 0;
                            $supplierDiscount = 0;
                            $supplierMinretail = 0;
                            $supplierMinretail_cur_id = 0;
                            $supplierRecommretail = 0;
                            $supplierRecommretail_cur_id = 0;
                        }
                        $product->setField('supplier'.$j.'discount', $supplierDiscount);
                        $product->setField('supplier'.$j.'id', $supplierID);
                        $product->setField('supplier'.$j.'code', $supplierCode);
                        $product->setField('supplier'.$j.'price', $supplierPrice);
                        $product->setField('supplier'.$j.'currencyid', $supplierCurrencyID);
                        $product->setField('supplier'.$j.'availtext', $supplierAvailText);
                        $product->setField('supplier'.$j.'comment', $supplierComment);
                        $product->setField('supplier'.$j.'avail', $supplierAvail);
                        $product->setField('supplier'.$j.'date', date('Y-m-d H:i:s'));
                        $product->setField('supplier'.$j.'minretail', $supplierMinretail);
                        $product->setField('supplier'.$j.'minretail_cur_id', $supplierMinretail_cur_id);
                        $product->setField('supplier'.$j.'recommretail', $supplierRecommretail);
                        $product->setField('supplier'.$j.'recommretail_cur_id', $supplierRecommretail_cur_id);
                    }

                    $product->update();

                    $this->setValue('message', 'ok');

                    SQLObject::TransactionCommit();
                } catch (ServiceUtils_Exception $e) {
                    SQLObject::TransactionRollback();

                    $this->setValue('message', 'error');
                    $this->setValue('errorsArray', $e->getErrorsArray());
                }
            }

            // текущий поставщик
            $currentSupplierID = $product->getSupplierid();

            // значения поставщиков
            $a = array();
            $supplierIDArray = array(-1);

            for ($j = 1; $j <= 10; $j++) {
                $supplierID =  $product->getField('supplier'.$j.'id');
                $supplierCode = $product->getField('supplier'.$j.'code');
                $supplierPrice = $product->getField('supplier'.$j.'price');
                $supplierCurrencyID = $product->getField('supplier'.$j.'currencyid');
                $supplierDate = $product->getField('supplier'.$j.'date');
                $supplierAvailText = $product->getField('supplier'.$j.'availtext');
                $supplierComment = $product->getField('supplier'.$j.'comment');
                $supplierAvail = $product->getField('supplier'.$j.'avail');
                $supplierDiscount = $product->getField('supplier'.$j.'discount');
                $supplierMinretail = $product->getField('supplier'.$j.'minretail');
                $supplierMinretail_cur_id = $product->getField('supplier'.$j.'minretail_cur_id');
                $supplierRecommretail = $product->getField('supplier'.$j.'recommretail');
                $supplierRecommretail_cur_id = $product->getField('supplier'.$j.'recommretail_cur_id');

                $current = ($currentSupplierID && $supplierID == $currentSupplierID);

                if ($supplierID > 0) {
                    $supplierIDArray[] = $supplierID;
                }

                if (Checker::CheckDate($supplierDate)) {
                    $supplierDate = DateTime_Formatter::DateTimePhonetic($supplierDate);
                } else {
                    $supplierDate = false;
                }

                $a[$j] = array(
                'supplierID' => $supplierID,
                'supplierCode' => htmlspecialchars($supplierCode),
                'supplierPrice' => $supplierPrice,
                'supplierCurrencyID' => $supplierCurrencyID,
                'supplierDate' => $supplierDate,
                'supplierAvailText' => htmlspecialchars($supplierAvailText),
                'supplierComment' => htmlspecialchars($supplierComment),
                'supplierAvail' => htmlspecialchars($supplierAvail),
                'supplierDiscount' => $supplierDiscount,
                'supplierMinretail' => $supplierMinretail,
                'supplierMinretail_cur_id' => $supplierMinretail_cur_id,
                'supplierRecommretail' => $supplierRecommretail,
                'supplierRecommretail_cur_id' => $supplierRecommretail_cur_id,
                'current' => $current,
                );
            }
            $this->setValue('valueArray', $a);
            $this->setValue('suppliersCount', Shop::Get()->getShopService()->getSuppliersAll()->getCount());

            // список поставщиков
            $suppliers = Shop::Get()->getShopService()->getSuppliersAll();
            $suppliers->addWhereQuery("(id IN (".implode(',', $supplierIDArray).") OR hidden=0)");
            $a = array();
            while ($x = $suppliers->getNext()) {
                try {
                    $contact = $x->getContact();
                    $contactId = $contact->getId();
                    $url = $contact->makeURLEdit();
                } catch (Exception $e) {
                    $contactId = '';
                    $url = '';
                }    
                $a[] = array(
                'id' => $x->getId(),
                'name' => $x->makeName(),
                'color' => $x->getColor(),
                'contactId' => $contactId,
                'url' => $url,    
                );
            }
            $this->setValue('supplierArray', $a);

            // список валют
            $currencies = Shop::Get()->getCurrencyService()->getCurrencyActive();
            $a = array();
            while ($x = $currencies->getNext()) {
                $a[] = array(
                'id' => $x->getId(),
                'name' => $x->getName(),
                );
            }
            $this->setValue('currencyArray', $a);

            // меню
            $menu = Engine::GetContentDriver()->getContent('shop-admin-products-menu');
            $menu->setValue('selected', 'supplier');
            $this->setValue('menu', $menu->render());

        } catch (ServiceUtils_Exception $ge) {
            if (PackageLoader::Get()->getMode('debug')) {
                print $ge;
            }

            Engine::Get()->getRequest()->setContentNotFound();
        }
    }

}