<?php
/**
 * Авто формирование заказов поставщику
 *
 * @author Maxim Miroshnichenko <max@webproduction.ua>
 * @copyright WebProduction
 * @package OneClick
 */
class Shop_Event_Order_Supplier implements Events_IEventObserver {

    public function notify(Events_Event $event) {
        try {
            // проверяем стаус у текущего заказа
            $order = $this->_getOrder($event);
            $orderStatus = $order->getStatus();
            $orderProducts = $order->getOrderProducts();

            // добавление товаров в заказ поставщика
            if ($orderStatus->getCreateOrderSupplier()) {
                while ($op = $orderProducts->getNext()) {
                    $this->shopOrderProductSupplierOrder($op);
                }
            }

            // удаление товаров из заказа поставщику
            if ($orderStatus->getCancelOrderSupplier()) {
                // убираем товар из заказа поставщику, если он есть
                while ($op = $orderProducts->getNext()) {
                    $orderProductsSupplier = Shop::Get()->getShopService()->getOrderProductsAll();
                    $orderProductsSupplier->setLinkkey('orderproduct-' . $op->getId());
                    // проверка статуса заказа
                    $orderProductsSupplier->addWhereQuery(
                        "orderid IN (SELECT id FROM shoporder WHERE statusid IN (
                        SELECT id FROM shoporderstatus WHERE
                            (payed='0' and saled='0' and prepayed='0' and closed='0' and shipped='0')
                    ))"
                    );

                    while ($x = $orderProductsSupplier->getNext()) {
                        $orderSupplier = $x->getOrder();
                        $x->delete();

                        Shop::Get()->getShopService()->recalculateOrderSums($orderSupplier);
                    }
                }
            }

        } catch (Exception $statusEx) {

        }
    }

    public function shopOrderProductSupplierOrder(ShopOrderProduct $orderProduct) {
        // ищем связанный товар
        $tmp = new ShopOrderProduct();
        $tmp->setProductid($orderProduct->getProductid());
        $tmp->setLinkkey('orderproduct-'.$orderProduct->getId());

        $productFind = false;
        $productCountInClosedOrder = 0;
        $productCountInOpenOrder = 0;

        // ищем связанный товар в заказе с учетом статусов
        while ($x = $tmp->getNext()) {
            try {
                $status = $x->getOrder()->getStatus();
                // проверяем статус
                if ($status->getShipped() || $status->getSaled() || $status->getClosed() ||
                    $status->getPayed() || $status->getPrepayed()) {
                    $productCountInClosedOrder += $x->getProductcount();
                } else {
                    $productCountInOpenOrder += $x->getProductcount();
                    $productFind[]= $x;
                }
            } catch (Exception $e) {

            }

        }
        // сколько надо добавить
        $productCount = $orderProduct->getProductcount() - $productCountInClosedOrder - $productCountInOpenOrder;
        if (Shop_ModuleLoader::Get()->isImported('storage')) {
            // считаем сколько есть на складе
            try {
                $balance = StorageBalanceService::Get()->getBalanceByProductForReserve(
                    $orderProduct->getProduct(),
                    Shop::Get()->getUserService()->getUser()
                )->getNext();

                if ($balance) {
                    $productCount-= $balance->getAmountAvailable();
                }
            } catch (Exception $e) {

            }

        }

        if ($productFind) {
            // связанный товар найден.
            // обновляем количество
            if ($productCount > 0) {
                // количество увеличиваем
                $product = $productFind[0];
                $product->setProductcount($product->getProductcount() + $productCount);
                $product->update();
                // пересчитать цены
                Shop::Get()->getShopService()->recalculateOrderSums($product->getOrder());
            } elseif ($productCount < 0) {
                // количество уменьшаем
                foreach ($productFind as $product) {
                    $count = $product->getProductcount();
                    $productCount += $count;
                    if ($productCount > 0) {
                        $product->setProductcount($productCount);
                    } else {
                        $product->setProductcount(0);
                    }
                    $product->update();
                    // пересчитать цены
                    Shop::Get()->getShopService()->recalculateOrderSums($product->getOrder());

                    if ($productCount > 0) {
                        break;
                    }

                }

            }

        } elseif ($productCount > 0) {
            // связанный товар не найден.
            $this->_addProducSupplierOrder($orderProduct, $productCount);

        }
    }

    private function _addProducSupplierOrder (ShopOrderProduct $orderProduct, $productCount = false) {
        try {
            // определяем поставщика
            $supplier = $orderProduct->getSupplier();
            if (!$supplier->getWorkflowid()) {
                return false;
            }
            $supplierContact = $supplier->getContact();

            // находим открытый заказ поставщику
            $orderSupplier = new ShopOrder();
            $orderSupplier->setOutcoming(1);
            $orderSupplier->setUserid($supplierContact->getId());
            $orderSupplier->setIssue(0);
            $orderSupplier->addWhereQuery("(linkkey NOT LIKE 'referal-%')");
            $orderSupplier->addWhereQuery(
                "statusid IN (SELECT id FROM shoporderstatus WHERE
                (payed='0' and saled='0' and prepayed='0' and closed='0' and shipped='0'))"
            );

            if ($orderSupplier = $orderSupplier->getNext()) {
                // открытый заказ найден,
                // дописываем в него
                $this->_addSupplierOrderProduct($orderSupplier, $orderProduct, $productCount);

            } else {
                // заказ не найден
                // нужно создавать новый
                $workFlow = false;
                try {
                    $workFlow = Shop::Get()->getShopService()->getOrderCategoryByID($supplier->getWorkflowid());
                } catch (Exception $e) {

                }

                $orderSupplier = Shop::Get()->getShopService()->makeOrderEmpty();

                $orderSupplier->setClientname($supplierContact->makeName(false, false));
                $orderSupplier->setClientphone($supplierContact->getPhone());
                $orderSupplier->setClientemail($supplierContact->getEmail());
                $orderSupplier->setClientaddress($supplierContact->getAddress());
                $orderSupplier->setUserid($supplierContact->getId());
                $orderSupplier->setOutcoming(1);
                $orderSupplier->setIssue(0);
                $orderSupplier->setCategoryid($supplier->getWorkflowid());
                $orderSupplier->setStatusid($workFlow ? $workFlow->getStatusDefault()->getId():0);
                $orderSupplier->update();

                // дописываем в него
                $this->_addSupplierOrderProduct($orderSupplier, $orderProduct, $productCount);

            }

        } catch (Exception $e) {

        }

    }

    /**
     * Добавить товар в заказ поставщика (на основе строки заказа клиента)
     *
     * @param ShopOrder $orderSupplier
     * @param ShopOrderProduct $orderProduct
     * @param int $productCount
     */
    private function _addSupplierOrderProduct(ShopOrder $orderSupplier, ShopOrderProduct $orderProduct,
                                              $productCount = false) {
        // определяем цену и поставщика
        try {
            $supplierCode = '';

            $product = $orderProduct->getProduct();

            for ($j = 1; $j <= 10; $j++) {
                $supplierID = $product->getField('supplier'.$j.'id');

                if ($supplierID == $orderProduct->getSupplierid()) {
                    $supplierCode = $product->getField('supplier'.$j.'code');
                    break;
                }
            }

            try {
                $articul = $orderProduct->getProduct()->getArticul();
            } catch (Exception $e) {
                $articul = false;
            }

            $tmp = new ShopOrderProduct();
            $tmp->setProductid($orderProduct->getProductid());
            $tmp->setOrderid($orderSupplier->getId());
            $tmp->setProductname($supplierCode.' '.$articul.' '.$orderProduct->getProductname());
            $tmp->setProductcount($productCount);
            $tmp->setProductprice($product->getPricebase());
            $tmp->setCurrencyid(Shop::Get()->getCurrencyService()->getCurrencySystem()->getId());
            $tmp->setLinkkey('orderproduct-'.$orderProduct->getId());
            $tmp->insert();

        } catch (Exception $e) {

        }

        // пересчитать цены
        Shop::Get()->getShopService()->recalculateOrderSums($orderSupplier);
    }


    /**
     * Получить заказ. Метод обертка для типизации.
     *
     * @param Events_Event $event
     *
     * @return ShopOrder
     */
    private function _getOrder(Events_Event $event) {
        return $event->getOrder();
    }

}