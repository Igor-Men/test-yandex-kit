<?php
/**
 * При создании заказа или изменении статуса заказа отправить
 * письмо по шаблону статуса менеджеру
 *
 * @author Maxim Miroshnichenko <max@webproduction.ua>
 * @copyright WebProduction
 * @package OneClick
 */
class Shop_Event_OrderEmailManager implements Events_IEventObserver {

    public function notify(Events_Event $event) {
        $order = $this->_getOrder($event);

        // получаем шаблон
        $tpl = $order->getStatus()->getMessageadmin();
        if (!$tpl) {
            return;
        }

        // формируем письмо
        $html = Shop::Get()->getShopService()->makeOrderTemplate($order, $tpl);

        // убираем из него subject
        if (preg_match("/Subject\:\s*(.+?)\n/iu", $html, $r)) {
            $subject = trim(strip_tags($r[1]));
            $html = trim(preg_replace("/Subject\:\s*(.+?)\n/iu", '', $html, 1));
        } else {
            $subject = false;
        }

        // обратный емейл
        $emailFrom = Shop::Get()->getSettingsService()->getSettingValue('reverse-email');

        // емейлы для отправки
        $emailToArray = Shop::Get()->getShopService()->getNotificationEmailArray();

        try {
            $user = Shop::Get()->getUserService()->getUser();
        } catch (Exception $e) {
            $user = false;
        }

        // отправляем письмо
        foreach ($emailToArray as $to) {
            Shop::Get()->getUserService()->sendEmail(
                $emailFrom,
                $to,
                $subject,
                $html,
                false,
                false,
                false,
                Shop::Get()->getShopService()->getMailTemplate()
            );

            $comment = trim(strip_tags($html));
            $comment .= "\n\n";
            $comment .= "Отправлено на email {$order->getClientemail()} от email {$emailFrom}";
            $comment .= " с темой ".$subject;

            // после того как письмо отправлено,
            // добавляем его в комментарий к order'y
            Shop::Get()->getShopService()->addOrderEmail(
                $order,
                $user,
                $comment
            );
        }
    }

    /**
     * Получить заказ. Метод обертка для типизации.
     *
     * @param Events_Event $event
     *
     * @return ShopOrder
     */
    private function _getOrder(Events_Event $event) {
        return $event->getOrder();
    }

}